# Mensagens de Commit para Ansible - Organizadas por Pasta
# Um commit por pasta - Execute os comandos git individualmente

## 1. Pasta: ansible/ (Configuração Principal)
git add ansible/
git commit -m "feat(ansible): implementar automação completa com Ansible

- Adicionar configuração principal do Ansible (ansible.cfg)
- Implementar inventário de hosts para Azure App Services
- Configurar playbooks para instalação de dependências
- Implementar deploy automatizado do backend
- Configurar deploy automatizado do frontend
- Adicionar playbook principal (site.yml)
- Configurar variáveis de ambiente para hosts
- Implementar automação para Java, Maven, Node.js e npm
- Adicionar configurações de PostgreSQL client
- Implementar gerenciamento de processos com PM2
- Configurar nginx para frontend
- Adicionar systemd services para backend
- Implementar health checks e monitoramento"

## 2. Pasta: ansible/inventory/ (Inventário de Hosts)
git add ansible/inventory/
git commit -m "feat(ansible): configurar inventário de hosts Azure

- Implementar inventário dinâmico para Azure App Services
- Configurar variáveis de ambiente por host
- Adicionar configurações específicas para backend e frontend
- Implementar autenticação SSH para Azure
- Configurar grupos de hosts (azure_app_services)
- Adicionar variáveis de aplicação por tipo
- Configurar paths de chaves SSH
- Implementar configurações de Python interpreter
- Adicionar configurações de timeout e retry"

## 3. Pasta: ansible/playbooks/ (Playbooks de Automação)
git add ansible/playbooks/
git commit -m "feat(ansible): implementar playbooks de automação

- Criar playbook principal (site.yml) para deploy completo
- Implementar playbook de instalação de dependências
- Configurar playbook de deploy do backend
- Implementar playbook de deploy do frontend
- Adicionar configurações de roles e tasks
- Implementar handlers para restart de serviços
- Configurar variáveis de ambiente por ambiente
- Adicionar validações e verificações de saúde
- Implementar rollback automático em caso de erro
- Configurar notificações de status de deploy"

## 4. Pasta: ansible/roles/ (Roles do Ansible - se existir)
git add ansible/roles/
git commit -m "feat(ansible): implementar roles reutilizáveis

- Criar role para instalação de Java e Maven
- Implementar role para Node.js e npm
- Configurar role para PostgreSQL client
- Adicionar role para configuração de nginx
- Implementar role para systemd services
- Configurar role para PM2 e gerenciamento de processos
- Adicionar role para health checks
- Implementar role para backup e restore
- Configurar role para monitoramento e logs
- Adicionar role para segurança e hardening"

## 5. Pasta: ansible/group_vars/ (Variáveis de Grupo - se existir)
git add ansible/group_vars/
git commit -m "feat(ansible): configurar variáveis de grupo

- Definir variáveis para grupo azure_app_services
- Configurar variáveis específicas por ambiente
- Implementar variáveis de versão (Java, Node.js, Maven)
- Adicionar configurações de banco de dados
- Configurar variáveis de aplicação
- Implementar variáveis de rede e segurança
- Adicionar configurações de monitoramento
- Configurar variáveis de backup
- Implementar variáveis de performance
- Adicionar configurações de logs"

## 6. Pasta: ansible/host_vars/ (Variáveis de Host - se existir)
git add ansible/host_vars/
git commit -m "feat(ansible): configurar variáveis específicas por host

- Definir variáveis para backend host
- Configurar variáveis para frontend host
- Implementar configurações específicas de aplicação
- Adicionar variáveis de ambiente por host
- Configurar paths e diretórios específicos
- Implementar configurações de porta e protocolo
- Adicionar variáveis de banco de dados por host
- Configurar variáveis de monitoramento
- Implementar configurações de segurança
- Adicionar variáveis de performance"

## 7. Pasta: ansible/templates/ (Templates - se existir)
git add ansible/templates/
git commit -m "feat(ansible): implementar templates de configuração

- Criar templates para nginx configuration
- Implementar templates para systemd services
- Configurar templates para PM2 ecosystem
- Adicionar templates para application.properties
- Implementar templates para environment variables
- Configurar templates para health check scripts
- Adicionar templates para backup scripts
- Implementar templates para monitoring configs
- Configurar templates para security policies
- Adicionar templates para log rotation"

## 8. Pasta: ansible/files/ (Arquivos Estáticos - se existir)
git add ansible/files/
git commit -m "feat(ansible): adicionar arquivos estáticos de configuração

- Adicionar arquivos de configuração do nginx
- Implementar scripts de inicialização
- Configurar arquivos de environment
- Adicionar certificados e chaves
- Implementar scripts de backup
- Configurar arquivos de log rotation
- Adicionar scripts de health check
- Implementar configurações de firewall
- Configurar arquivos de monitoramento
- Adicionar scripts de manutenção"

## 9. Pasta: ansible/scripts/ (Scripts de Automação - se existir)
git add ansible/scripts/
git commit -m "feat(ansible): implementar scripts de automação

- Criar scripts de deploy automatizado
- Implementar scripts de rollback
- Configurar scripts de backup automático
- Adicionar scripts de health check
- Implementar scripts de monitoramento
- Configurar scripts de limpeza
- Adicionar scripts de atualização
- Implementar scripts de notificação
- Configurar scripts de troubleshooting
- Adicionar scripts de manutenção"

## 10. Pasta: ansible/docs/ (Documentação - se existir)
git add ansible/docs/
git commit -m "docs(ansible): adicionar documentação completa do Ansible

- Documentar estrutura de playbooks
- Explicar configuração de inventário
- Documentar variáveis e configurações
- Adicionar guias de troubleshooting
- Implementar documentação de roles
- Configurar exemplos de uso
- Adicionar documentação de variáveis
- Implementar guias de deploy
- Configurar documentação de monitoramento
- Adicionar best practices"

---

## Comandos para Executar Todos os Commits:

```bash
# Navegar para o diretório do projeto
cd ansible

# Executar commits por pasta (copie e cole cada bloco):

# Commit 1 - Configuração Principal
git add ansible/
git commit -m "feat(ansible): implementar automação completa com Ansible..."

# Commit 2 - Inventário
git add ansible/inventory/
git commit -m "feat(ansible): configurar inventário de hosts Azure..."

# Commit 3 - Playbooks
git add ansible/playbooks/
git commit -m "feat(ansible): implementar playbooks de automação..."

# Commit 4 - Roles (se existir)
git add ansible/roles/
git commit -m "feat(ansible): implementar roles reutilizáveis..."

# Commit 5 - Group Vars (se existir)
git add ansible/group_vars/
git commit -m "feat(ansible): configurar variáveis de grupo..."

# Commit 6 - Host Vars (se existir)
git add ansible/host_vars/
git commit -m "feat(ansible): configurar variáveis específicas por host..."

# Commit 7 - Templates (se existir)
git add ansible/templates/
git commit -m "feat(ansible): implementar templates de configuração..."

# Commit 8 - Files (se existir)
git add ansible/files/
git commit -m "feat(ansible): adicionar arquivos estáticos de configuração..."

# Commit 9 - Scripts (se existir)
git add ansible/scripts/
git commit -m "feat(ansible): implementar scripts de automação..."

# Commit 10 - Documentação (se existir)
git add ansible/docs/
git commit -m "docs(ansible): adicionar documentação completa do Ansible..."
```

## Estrutura de Pastas do Ansible:

```
ansible/
├── ansible.cfg                 # Configuração principal
├── inventory/
│   └── hosts.yml              # Inventário de hosts
├── playbooks/
│   ├── site.yml               # Playbook principal
│   ├── install-dependencies.yml
│   ├── deploy-backend.yml
│   └── deploy-frontend.yml
├── roles/                     # Roles reutilizáveis (opcional)
├── group_vars/                # Variáveis de grupo (opcional)
├── host_vars/                 # Variáveis de host (opcional)
├── templates/                 # Templates Jinja2 (opcional)
├── files/                     # Arquivos estáticos (opcional)
├── scripts/                   # Scripts de automação (opcional)
└── docs/                      # Documentação (opcional)
```

## Notas Importantes:

1. **Execute apenas os commits para pastas que existem** no seu projeto
2. **Verifique a estrutura** antes de executar os comandos
3. **Ajuste as mensagens** conforme sua estrutura específica
4. **Use tags** para marcar versões: `git tag v1.0.0-ansible`
5. **Teste os playbooks** após cada commit importante

## Padrão de Commits:

- `feat:` - Novas funcionalidades de automação
- `fix:` - Correções em playbooks ou configurações
- `docs:` - Documentação do Ansible
- `refactor:` - Refatoração de playbooks
- `chore:` - Manutenção de configurações
- `perf:` - Melhorias de performance
- `test:` - Testes de playbooks
